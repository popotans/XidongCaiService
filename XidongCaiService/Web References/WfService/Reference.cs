//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1008 版自动生成。
// 
#pragma warning disable 1591

namespace XidongCaiService.WfService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WfServiceSoap", Namespace="http://tempuri.org/")]
    public partial class WfService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SaveProcInstIDCallBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstCompleteCallBackV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstCompleteCallBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WfService() {
            this.Url = global::XidongCaiService.Properties.Settings.Default.XidongCaiService_WfService_WfService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SaveProcInstIDCallBackCompletedEventHandler SaveProcInstIDCallBackCompleted;
        
        /// <remarks/>
        public event ProcInstCompleteCallBackV2CompletedEventHandler ProcInstCompleteCallBackV2Completed;
        
        /// <remarks/>
        public event ProcInstCompleteCallBackCompletedEventHandler ProcInstCompleteCallBackCompleted;
        
        /// <remarks/>
        public event ProcInstCompleteCallBackForFinanceWillSignNoCompletedEventHandler ProcInstCompleteCallBackForFinanceWillSignNoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveProcInstIDCallBack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveProcInstIDCallBack(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID) {
            this.Invoke("SaveProcInstIDCallBack", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID});
        }
        
        /// <remarks/>
        public void SaveProcInstIDCallBackAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID) {
            this.SaveProcInstIDCallBackAsync(SubSystemName, SubSystemID, SubSystemUser, SubSystemType, ProcInstID, null);
        }
        
        /// <remarks/>
        public void SaveProcInstIDCallBackAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, object userState) {
            if ((this.SaveProcInstIDCallBackOperationCompleted == null)) {
                this.SaveProcInstIDCallBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveProcInstIDCallBackOperationCompleted);
            }
            this.InvokeAsync("SaveProcInstIDCallBack", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID}, this.SaveProcInstIDCallBackOperationCompleted, userState);
        }
        
        private void OnSaveProcInstIDCallBackOperationCompleted(object arg) {
            if ((this.SaveProcInstIDCallBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveProcInstIDCallBackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcInstCompleteCallBackV2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcInstCompleteCallBackV2(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, string HTTitle, string TempID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> StartDate, bool IsApproved) {
            this.Invoke("ProcInstCompleteCallBackV2", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID,
                        HTTitle,
                        TempID,
                        StartDate,
                        IsApproved});
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackV2Async(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, string HTTitle, string TempID, System.Nullable<System.DateTime> StartDate, bool IsApproved) {
            this.ProcInstCompleteCallBackV2Async(SubSystemName, SubSystemID, SubSystemUser, SubSystemType, ProcInstID, HTTitle, TempID, StartDate, IsApproved, null);
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackV2Async(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, string HTTitle, string TempID, System.Nullable<System.DateTime> StartDate, bool IsApproved, object userState) {
            if ((this.ProcInstCompleteCallBackV2OperationCompleted == null)) {
                this.ProcInstCompleteCallBackV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstCompleteCallBackV2OperationCompleted);
            }
            this.InvokeAsync("ProcInstCompleteCallBackV2", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID,
                        HTTitle,
                        TempID,
                        StartDate,
                        IsApproved}, this.ProcInstCompleteCallBackV2OperationCompleted, userState);
        }
        
        private void OnProcInstCompleteCallBackV2OperationCompleted(object arg) {
            if ((this.ProcInstCompleteCallBackV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstCompleteCallBackV2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcInstCompleteCallBack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcInstCompleteCallBack(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, bool IsApproved) {
            this.Invoke("ProcInstCompleteCallBack", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID,
                        IsApproved});
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, bool IsApproved) {
            this.ProcInstCompleteCallBackAsync(SubSystemName, SubSystemID, SubSystemUser, SubSystemType, ProcInstID, IsApproved, null);
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string ProcInstID, bool IsApproved, object userState) {
            if ((this.ProcInstCompleteCallBackOperationCompleted == null)) {
                this.ProcInstCompleteCallBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstCompleteCallBackOperationCompleted);
            }
            this.InvokeAsync("ProcInstCompleteCallBack", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        ProcInstID,
                        IsApproved}, this.ProcInstCompleteCallBackOperationCompleted, userState);
        }
        
        private void OnProcInstCompleteCallBackOperationCompleted(object arg) {
            if ((this.ProcInstCompleteCallBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstCompleteCallBackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcInstCompleteCallBackForFinanceWillSignNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcInstCompleteCallBackForFinanceWillSignNo(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string FinanceWillSignNo, bool IsApproved) {
            this.Invoke("ProcInstCompleteCallBackForFinanceWillSignNo", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        FinanceWillSignNo,
                        IsApproved});
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackForFinanceWillSignNoAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string FinanceWillSignNo, bool IsApproved) {
            this.ProcInstCompleteCallBackForFinanceWillSignNoAsync(SubSystemName, SubSystemID, SubSystemUser, SubSystemType, FinanceWillSignNo, IsApproved, null);
        }
        
        /// <remarks/>
        public void ProcInstCompleteCallBackForFinanceWillSignNoAsync(string SubSystemName, string SubSystemID, string SubSystemUser, string SubSystemType, string FinanceWillSignNo, bool IsApproved, object userState) {
            if ((this.ProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted == null)) {
                this.ProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted);
            }
            this.InvokeAsync("ProcInstCompleteCallBackForFinanceWillSignNo", new object[] {
                        SubSystemName,
                        SubSystemID,
                        SubSystemUser,
                        SubSystemType,
                        FinanceWillSignNo,
                        IsApproved}, this.ProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted, userState);
        }
        
        private void OnProcInstCompleteCallBackForFinanceWillSignNoOperationCompleted(object arg) {
            if ((this.ProcInstCompleteCallBackForFinanceWillSignNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstCompleteCallBackForFinanceWillSignNoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveProcInstIDCallBackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcInstCompleteCallBackV2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcInstCompleteCallBackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcInstCompleteCallBackForFinanceWillSignNoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591